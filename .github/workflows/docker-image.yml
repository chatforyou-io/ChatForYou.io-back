name: Docker CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # 1. 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4

      # Debug: Check if KUBE_CONFIG_DATA is present
    - name: Debug KUBE_CONFIG_DATA
      run: |
        echo "config env val ::::::: ${{ env.KUBE_CONFIG }}"
        echo "config val ::::::::: ${{ secrets.KUBE_CONFIG }}"
        echo "secret length ::::::::::: ${{ secrets.KUBE_CONFIG }}" | wc -c

      # Configure Kubeconfig
    - name: Configure Kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=$PWD/kubeconfig

      # Debug: Check Decoded Kubeconfig
    - name: Check Decoded Kubeconfig
      run: |
        cat kubeconfig

      # Verify Kubernetes Connection
    - name: Verify Kubernetes Connection
      run: kubectl cluster-info

#      # 2. 현재 시간 기반 이미지 태그 생성
#    - name: Generate timestamp tag
#      id: tag
#      run: |
#        echo "TAG=$(date '+%Y%m%d%H%M')" >> $GITHUB_ENV
#
#      # 3. Docker 이미지 빌드
#    - name: Build Docker Image
#      run: |
#        docker build --file Dockerfile -t hjproject.kro.kr/chatforyou/chatforyou:${{ env.TAG }} .
#
#      # 4. Docker 이미지 푸시
#    - name: Push Docker Image
#      run: |
#        docker push hjproject.kro.kr/chatforyou/chatforyou:${{ env.TAG }}
#
#      # 5. Kubernetes Kubeconfig 설정
#    - name: Configure Kubeconfig
#      run: |
#        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
#        export KUBECONFIG=$PWD/kubeconfig
#
#      # 6. Kubernetes 배포
#    - name: Deploy to Kubernetes
#      run: |
#        kubectl set image deployment/chatforyou-io \
#          chatforyou-container=hjproject.kro.kr/chatforyou/chatforyou:${{ env.TAG }} \
#          -n chatforyou-io
#        kubectl rollout status deployment/chatforyou-io -n chatforyou-io